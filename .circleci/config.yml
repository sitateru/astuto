version: 2.1
orbs:
  aws-ecr: circleci/aws-ecr@6.9.1
  aws-eks: circleci/aws-eks@1.0.0
  kubernetes: circleci/kubernetes@0.11.0
executors:
  machine-with-docker_layer_caching:
    machine:
      image: ubuntu-1604:201903-01
      docker_layer_caching: true
jobs:
  build-and-push-image:
    environment:
      APP: cloud-feedbacks
      DOCKER_BUILDKIT: 1
    executor: machine-with-docker_layer_caching
    steps:
      - checkout
      - run:
          name: Check build a docker image or not
          command: |
            if [[ $CIRCLE_BRANCH =~ ^(feature/.+)$ ]]; then
              with_docker=$(git log --format=oneline -n 1 $CIRCLE_SHA1 | grep -Eqs 'with docker' && echo 'true' || echo 'false')
            else
              with_docker="true"
            fi

            if [ $with_docker = "false" ]; then
              echo "no docker"
              circleci step halt
            fi
      - run:
          name: Initialize environment variables
          command: |
            if [[ $CIRCLE_BRANCH =~ ^(master|develop)$ ]]; then
              ENVIRONMENT="production"
              NAMESPACE=$ENVIRONMENT
            elif [[ $CIRCLE_BRANCH =~ ^(feature\/.+)$ ]]; then
              #ENVIRONMENT="feature"
              #NAMESPACE="$(echo $CIRCLE_BRANCH | tr A-Z a-z | sed -e 's/[^0-9a-z-]/-/g')"
              ENVIRONMENT="production"
              NAMESPACE=$ENVIRONMENT
            else
              echo "circleci step halt"
              circleci step halt
            fi
            echo "export ENVIRONMENT=$ENVIRONMENT" >> $BASH_ENV
            echo "export AWS_ECR_REPOSITORY=$APP/$NAMESPACE/web" >> $BASH_ENV
      - aws-ecr/build-and-push-image:
          checkout: false
          create-repo: true
          dockerfile: docker/app/Dockerfile.production
          extra-build-args: >-
            --build-arg RAILS_MASTER_KEY=$RAILS_MASTER_KEY
            --progress plain
          repo: $AWS_ECR_REPOSITORY
      - run:
          name: Tag to image
          command: |
            IMAGE="$AWS_ECR_ACCOUNT_URL/$AWS_ECR_REPOSITORY"
            TAG="$(date +%Y%m%dT%H%M%S%Z)-${CIRCLE_SHA1}"
            docker image tag $IMAGE:latest $IMAGE:$TAG
            docker image push $IMAGE:$TAG
            echo "export TAG=$TAG" >> /tmp/persisted_bash_env
            echo "export AWS_ECR_REPOSITORY=$AWS_ECR_REPOSITORY" >> /tmp/persisted_bash_env
      - persist_to_workspace:
          root: /tmp
          paths:
            - persisted_bash_env

  deploy-image:
    environment:
      APP: cloud-feedbacks
    executor: aws-eks/python3
    steps:
      - checkout
      - run:
          name: Check deploy a docker image or not
          command: |
            if [[ $CIRCLE_BRANCH =~ ^(feature/.+)$ ]]; then
              with_docker=$(git log --format=oneline -n 1 $CIRCLE_SHA1 | grep -Eqs 'with docker' && echo 'true' || echo 'false')
            else
              with_docker="true"
            fi

            if [ $with_docker = "false" ]; then
              echo "no docker"
              circleci step halt
            fi
      - run:
          name: Initialize environment variables
          command: |
            if [[ $CIRCLE_BRANCH =~ ^(master|develop)$ ]]; then
              ENVIRONMENT="production"
              NAMESPACE=$ENVIRONMENT
              HTTP_HOST="cloud-feedbacks.sitateru.com"
            elif [[ $CIRCLE_BRANCH =~ ^(feature\/.+)$ ]]; then
              #ENVIRONMENT="feature"
              #NAMESPACE="$(echo $CIRCLE_BRANCH | tr A-Z a-z | sed -e 's/[^0-9a-z-]/-/g')"
              #HTTP_HOST="${NAMESPACE}-cloud-feedbacks-api.sitateru.com"
              ENVIRONMENT="production"
              NAMESPACE=$ENVIRONMENT
              HTTP_HOST="cloud-feedbacks.sitateru.com"
            else
              echo "circleci step halt"
              circleci step halt
            fi
            echo "export ENVIRONMENT=$ENVIRONMENT" >> $BASH_ENV
            echo "export NAMESPACE=${APP}-${NAMESPACE}" >> $BASH_ENV
            echo "export HTTP_HOST=$HTTP_HOST" >> $BASH_ENV
      - attach_workspace:
          at: /tmp
      - run:
          name: Extract environment variables
          command: |
            source /tmp/persisted_bash_env
            find k8s/base k8s/overlays/$ENVIRONMENT -type f -exec sed -i \
              -e 's/$AWS_ACCOUNT_ID/'"$AWS_ACCOUNT_ID"'/g' \
              -e 's/$AWS_ECR_ACCOUNT_URL/'"$AWS_ECR_ACCOUNT_URL"'/g' \
              -e 's|$AWS_ECR_REPOSITORY|'"$AWS_ECR_REPOSITORY"'|g' \
              -e 's/$NAMESPACE/'"$NAMESPACE"'/g' \
              -e 's/$HTTP_HOST/'"$HTTP_HOST"'/g' \
              -e 's/$APP/'"$APP"'/g' \
              -e 's/$ENVIRONMENT/'"$ENVIRONMENT"'/g' \
              -e 's/$TAG/'"$TAG"'/g' \
              {} \;
      - aws-eks/update-kubeconfig-with-authenticator:
          aws-region: $AWS_REGION
          cluster-name: sitateru
          install-kubectl: true
          authenticator-release-tag: v0.5.1
      - run:
          name: Create a namespace
          command: |
            kubectl apply -f k8s/overlays/$ENVIRONMENT/namespace.yaml
      - run:
          name: Install kubesec
          command: |
            curl -sSL https://github.com/shyiko/kubesec/releases/download/0.9.2/kubesec-0.9.2-linux-amd64 -o kubesec \
              && chmod a+x kubesec \
              && sudo mv kubesec /usr/local/bin/
            curl -sSL https://github.com/shyiko/kubesec/releases/download/0.9.2/kubesec-0.9.2-linux-amd64.asc -o kubesec.asc
            curl -sS https://keybase.io/shyiko/pgp_keys.asc | gpg --import
            gpg --verify kubesec.asc /usr/local/bin/kubesec
      - run:
          name: Decrypt secrets
          command: |
            kubesec decrypt k8s/overlays/$ENVIRONMENT/secrets/secret.yaml.enc \
              > k8s/overlays/$ENVIRONMENT/secrets/secret.yaml
      - run:
          name: Create or update resources for k8s/overlays/$ENVIRONMENT
          command: |
            kubectl apply -k k8s/overlays/$ENVIRONMENT

workflows:
  version: 2
  build_and_make:
    jobs:
      - build-and-push-image:
          filters:
            branches:
              only:
                - /^(master|develop)$/
                - /^feature\/.+$/
      - deploy-image:
          requires:
            - build-and-push-image
          filters:
            branches:
              only:
                - /^(master|develop)$/
                - /^feature\/.+$/
